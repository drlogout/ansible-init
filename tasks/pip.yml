---

- name: pip > check installed package
  command: "{{ pip }} --version"
  ignore_errors: true
  changed_when: false
  check_mode: no
  register: pip_is_installed

- name: pip > download
  get_url:
    url: "{{ pip_download_url }}"
    dest: "{{ pip_download_dest }}"
  when: pip_is_installed.rc != 0

- name: pip > install
  command: "{{ python }} {{ pip_download_dest }}/get-pip.py"
  when: pip_is_installed.rc != 0

- name: pip > delete tmp files
  file:
    state: absent
    path: "{{ pip_download_dest }}/get-pip.py"
  when: pip_is_installed.rc != 0

- name: pip > check version
  shell: "{{ pip }} --version | awk '{print $2}'"
  register: pip_installed_version
  changed_when: false
  check_mode: no
  when: pip_version != None or pip_version != "LATEST"

- name: pip > reinstall
  command: "{{ pip }} install pip=={{ pip_version }}"
  become: yes
  when: pip_version != None and pip_installed_version.stdout != pip_version and "{{ pip_version | lower}}" != "latest"

- name: pip > upgrade
  command: "{{ pip }} install -U pip"
  register: pip_latest_output
  become: yes
  changed_when: pip_latest_output.stdout.find('Requirement already up-to-date') == -1
  when: pip_version == None or pip_version == "LATEST"


- name: pip > install packages
  pip:
    name: "{{ item }}"
  with_items: "{{ init_pip_packages }}"
